好的，這是一個非常棒的問題！將 AI 客服的問答內容從寫死的 if/else 程式碼中分離出來，做成一個「資料庫」，是讓它變得更聰明、更容易維護的關鍵一步。

我將會用三種層次來解釋如何做到這件事，從最簡單到最專業，您可以根據您的需求來選擇。

方法一：最簡單實用的「JavaScript 物件」資料庫 (推薦初學者)

這個方法不需要任何新技術，只需要在您現有的 JavaScript 程式碼中，用一個「陣列 (Array)」來存放所有的問答資料。這對於您目前的專案來說，是最直接且有效的升級。

步驟 1：設計資料結構

我們把每一個「問答配對」都當成一個物件 (Object)。這個物件至少需要兩個屬性：

keywords: 一個包含多個關鍵字的陣列。當使用者的問題包含任何一個關鍵字時，就觸發回答。

answer: 對應的回答內容。

步驟 2：建立您的「問答資料庫」

在您的 <script> 標籤內，sendChatMessage 函式之前，建立一個名為 qaDatabase 的陣列：

Generated javascript
// ===================================
// ===== AI 客服問答資料庫 (JavaScript 物件) =====
// ===================================
const qaDatabase = [
    {
        keywords: ["你好", "哈囉", "嗨"],
        answer: "您好！我是您的智慧農業助理，很高興為您服務。"
    },
    {
        keywords: ["溫度", "氣溫", "幾度"],
        answer: "目前的平均氣溫是 28.5°C。您可以前往「即時監測儀表板」查看詳細數據。"
    },
    {
        keywords: ["灑水", "澆水", "灌溉"],
        answer: "您想自動灑水還是手動控制？請到「智慧農業自動化控制」頁面進行操作。"
    },
    {
        keywords: ["收成", "預測", "產量"],
        answer: "根據最新的模型，預測本季玉米收成量約為 5.2 噸/公頃。更多資訊請看「分析報表與預測系統」。"
    },
    {
        keywords: ["功能", "可以做什麼", "幫助"],
        answer: "本系統可以提供即時監測、自動化控制、作物管理、數據分析預測等功能。請問您對哪一項有興趣？"
    }
    // 您可以在這裡無限添加新的問答配對！
];

// 預設回答 (如果都沒找到關鍵字)
const defaultAnswer = "對不起，我還在學習中，目前無法理解您的問題。您可以試著問我關於「溫度」、「灑水」或「收成」的問題。";

步驟 3：修改 sendChatMessage 函式來使用這個資料庫

現在，我們要改寫 sendChatMessage 函式，讓它不再使用 if/else，而是去搜尋我們的 qaDatabase。

修改後的 sendChatMessage 函式：

Generated javascript
function sendChatMessage() {
    const chatInput = document.getElementById("chat-input");
    const userMessage = chatInput.value.trim();

    if (userMessage === "") return;

    const chatMessages = document.getElementById("chat-messages");
    // 顯示使用者訊息
    chatMessages.innerHTML += `<div class="flex justify-end"><div class="bg-emerald-100 text-emerald-800 px-4 py-2 rounded-lg max-w-xs">${userMessage}</div></div>`;
    chatInput.value = "";
    chatMessages.scrollTop = chatMessages.scrollHeight;

    // --- AI 回應邏輯 ---
    setTimeout(() => {
        let botReply = defaultAnswer; // 先設定為預設回答

        // 遍歷整個資料庫，尋找匹配的關鍵字
        for (const qa of qaDatabase) {
            // 檢查 qa 物件中的每一個關鍵字
            const foundKeyword = qa.keywords.find(keyword => userMessage.includes(keyword));
            
            if (foundKeyword) {
                botReply = qa.answer; // 如果找到，就更新回答
                break; // 找到就跳出迴圈，不再繼續尋找
            }
        }

        // 顯示機器人回應
        chatMessages.innerHTML += `<div class="flex justify-start"><div class="bg-gray-200 text-gray-800 px-4 py-2 rounded-lg max-w-xs">${botReply}</div></div>`;
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }, 1000);
}
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
JavaScript
IGNORE_WHEN_COPYING_END

優點：

容易維護：想增加或修改問答，只要去動 qaDatabase 陣列就好，不用改動函式邏輯。

更有彈性：一個問題可以對應多個關鍵字。

程式碼乾淨：移除了又長又亂的 if/else 結構。

方法二：更進階的「JSON 檔案」資料庫

當您的問答資料非常多時，把它們全放在 JavaScript 檔案裡會讓檔案變得很臃腫。更好的方法是將資料獨立存成一個 JSON 檔案。

步驟 1：建立 qa-data.json 檔案

在您的專案資料夾中，建立一個新檔案，命名為 qa-data.json。內容和上面的 JavaScript 物件幾乎一樣，只是格式稍有不同 (例如，屬性名稱也要用雙引號)。

Generated json
[
    {
        "keywords": ["你好", "哈囉", "嗨"],
        "answer": "您好！我是您的智慧農業助理，很高興為您服務。"
    },
    {
        "keywords": ["溫度", "氣溫", "幾度"],
        "answer": "目前的平均氣溫是 28.5°C。您可以前往「即時監測儀表板」查看詳細數據。"
    },
    {
        "keywords": ["灑水", "澆水", "灌溉"],
        "answer": "您想自動灑水還是手動控制？請到「智慧農業自動化控制」頁面進行操作。"
    },
    {
        "keywords": ["收成", "預測", "產量"],
        "answer": "根據最新的模型，預測本季玉米收成量約為 5.2 噸/公頃。更多資訊請看「分析報表與預測系統」。"
    }
]
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
Json
IGNORE_WHEN_COPYING_END
步驟 2：在網頁中讀取這個 JSON 檔案

您需要用 fetch API 來讀取這個檔案。這需要您的網頁是透過一個伺服器來運行的（即使是本地伺服器），直接打開本地 index.html 檔案會因為安全限制而失敗。

修改後的 JavaScript 範例：

Generated javascript
let qaDatabase = []; // 先建立一個空陣列
const defaultAnswer = "對不起，我還在學習中...";

// 在網頁載入時，就去讀取 JSON 資料
window.onload = function() {
    // ... 原本的 onload 內容 ...

    // 讀取問答資料
    fetch('qa-data.json')
        .then(response => response.json())
        .then(data => {
            qaDatabase = data;
            console.log("問答資料庫載入成功！");
        })
        .catch(error => console.error("載入問答資料庫失敗:", error));
};

// sendChatMessage 函式保持不變，它會使用載入後的 qaDatabase
function sendChatMessage() {
    // ... 邏輯和方法一完全一樣 ...
}
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
JavaScript
IGNORE_WHEN_COPYING_END

優點：

資料與程式碼分離，非常乾淨。

非開發人員（如客服人員）可以直接修改 JSON 檔案來更新問答，無需接觸程式碼。

方法三：最專業的「後端 + 真實資料庫」

當您的應用需要上線、問答內容需要由多人透過管理介面來維護時，就需要使用後端伺服器和真實的資料庫（如 MySQL, MongoDB）。

架構流程：

前端 (您的網頁)：使用者輸入問題，透過 fetch 將問題發送到您的後端伺服器 API。

後端 (伺服器)：例如用 Node.js 或 Python 建立的伺服器，接收到請求。

資料庫：後端伺服器向資料庫查詢符合使用者問題的答案。

回應：後端將查到的答案回傳給前端。

前端：接收到答案並顯示在聊天視窗中。

優點：

極度彈性與強大：可以處理百萬級的問答資料。

安全：資料庫不會暴露在前端。

可擴展：可以在後端整合更複雜的自然語言處理 (NLP) AI 模型，讓回答更精準。

總結與建議
方法	技術	優點	適用情境
方法一 (JS 物件)	純 JavaScript	簡單、快速、無需伺服器	目前您的專案、個人專案、快速原型開發
方法二 (JSON 檔)	JavaScript + fetch	資料與程式碼分離、易於維護	中型專案、需要非開發人員更新資料時
方法三 (後端)	前端 + 後端 + 資料庫	強大、安全、可擴展	商業級應用、正式上線的產品

對於您現在的狀況，我強烈推薦您先採用【方法一】。它能立刻改善您的程式碼結構，讓您體會到資料驅動的好處，而且完全不需要學習新工具。等您對這個模式熟悉後，再挑戰方法二和三會更得心應手！
